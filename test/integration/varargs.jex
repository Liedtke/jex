// RUN: %jexc -f %s -l -c | FileCheck-12 %s
// Vararg type.
// CHECK: %_vararg_Integer = type { i64*, i64 }
// Alloca for array with variable arguments.
// CHECK: %argarray = alloca [3 x i64], align 8
// Alloca for vararg.
// CHECK: %vararg = alloca %_vararg_Integer, align 8
// CHECK:      begin:                                            ; preds = %entry
// CHECK-NEXT:   %arrayptr = getelementptr [3 x i64], [3 x i64]* %argarray, i32 0, i32 0
// CHECK-NEXT:   store i64 1, i64* %arrayptr, align 4
// CHECK-NEXT:   %arrayptr1 = getelementptr [3 x i64], [3 x i64]* %argarray, i32 0, i32 1
// CHECK-NEXT:   store i64 2, i64* %arrayptr1, align 4
// CHECK-NEXT:   call void @_operator_add_Integer_Integer__intrinsic(i64* %res_operator_add, i64 3, i64 4)
// CHECK-NEXT:   %0 = load i64, i64* %res_operator_add, align 4
// CHECK-NEXT:   %arrayptr2 = getelementptr [3 x i64], [3 x i64]* %argarray, i32 0, i32 2
// CHECK-NEXT:   store i64 %0, i64* %arrayptr2, align 4
// CHECK-NEXT:   %varargarrayptr = getelementptr %_vararg_Integer, %_vararg_Integer* %vararg, i32 0, i32 0
// CHECK-NEXT:   %arraybegin = getelementptr [3 x i64], [3 x i64]* %argarray, i32 0, i32 0
// CHECK-NEXT:   store i64* %arraybegin, i64** %varargarrayptr, align 8
// CHECK-NEXT:   %varargargcptr = getelementptr %_vararg_Integer, %_vararg_Integer* %vararg, i32 0, i32 1
// CHECK-NEXT:   store i64 3, i64* %varargargcptr, align 4
// CHECK-NEXT:   call void @_max_vararg_Integer(i64* %res_max, %_vararg_Integer* %vararg)

var a: Integer = max(1, 2, 3+4);
